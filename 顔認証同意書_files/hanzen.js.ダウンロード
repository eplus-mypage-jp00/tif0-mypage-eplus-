var zen2han_kana = function (str) {
    var kanaMap = {
        'ガ': 'ｶﾞ','ギ': 'ｷﾞ','グ': 'ｸﾞ','ゲ': 'ｹﾞ','ゴ': 'ｺﾞ',
        'ザ': 'ｻﾞ','ジ': 'ｼﾞ','ズ': 'ｽﾞ','ゼ': 'ｾﾞ','ゾ': 'ｿﾞ',
        'ダ': 'ﾀﾞ','ヂ': 'ﾁﾞ','ヅ': 'ﾂﾞ','デ': 'ﾃﾞ','ド': 'ﾄﾞ',
        'バ': 'ﾊﾞ','ビ': 'ﾋﾞ','ブ': 'ﾌﾞ','ベ': 'ﾍﾞ','ボ': 'ﾎﾞ',
        'パ': 'ﾊﾟ','ピ': 'ﾋﾟ','プ': 'ﾌﾟ','ペ': 'ﾍﾟ','ポ': 'ﾎﾟ',
        'ヴ': 'ｳﾞ','ヷ': 'ﾜﾞ','ヺ': 'ｦﾞ',
        'ア': 'ｱ','イ': 'ｲ','ウ': 'ｳ','エ': 'ｴ','オ': 'ｵ',
        'カ': 'ｶ','キ': 'ｷ','ク': 'ｸ','ケ': 'ｹ','コ': 'ｺ',
        'サ': 'ｻ','シ': 'ｼ','ス': 'ｽ','セ': 'ｾ','ソ': 'ｿ',
        'タ': 'ﾀ','チ': 'ﾁ','ツ': 'ﾂ','テ': 'ﾃ','ト': 'ﾄ',
        'ナ': 'ﾅ','ニ': 'ﾆ','ヌ': 'ﾇ','ネ': 'ﾈ','ノ': 'ﾉ',
        'ハ': 'ﾊ','ヒ': 'ﾋ','フ': 'ﾌ','ヘ': 'ﾍ','ホ': 'ﾎ',
        'マ': 'ﾏ','ミ': 'ﾐ','ム': 'ﾑ','メ': 'ﾒ','モ': 'ﾓ',
        'ヤ': 'ﾔ','ユ': 'ﾕ','ヨ': 'ﾖ',
        'ラ': 'ﾗ','リ': 'ﾘ','ル': 'ﾙ','レ': 'ﾚ','ロ': 'ﾛ',
        'ワ': 'ﾜ','ヲ': 'ｦ','ン': 'ﾝ',
        'ァ': 'ｧ','ィ': 'ｨ','ゥ': 'ｩ','ェ': 'ｪ','ォ': 'ｫ',
        'ッ': 'ｯ','ャ': 'ｬ','ュ': 'ｭ','ョ': 'ｮ',
        '。': '｡','、': '､','ー': 'ｰ','「': '｢','」': '｣','・': '･',
    }
    var reg = new RegExp('(' + Object.keys(kanaMap).join('|') + ')', 'g');
    return str
          .replace(reg, function (match) {
              return kanaMap[match];
          })
          .replace(/゛/g, 'ﾞ')
          .replace(/゜/g, 'ﾟ');
  };

var han2zen_kana = function(str) {
    var kanaMap = {
      'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
      'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
      'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
      'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
      'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',
      'ｳﾞ': 'ヴ', 'ﾜﾞ': 'ヷ', 'ｦﾞ': 'ヺ',
      'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
      'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
      'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
      'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
      'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
      'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
      'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
      'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
      'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
      'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',
      'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
      'ｯ': 'ッ', 'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ',
      '｡': '。', '､': '、', 'ｰ': 'ー', '｢': '「', '｣': '」', '･': '・'
  };

  var reg = new RegExp('(' + Object.keys(kanaMap).join('|') + ')', 'g');
  return str
          .replace(reg, function (match) {
              return kanaMap[match];
          })
          .replace(/ﾞ/g, '゛')
          .replace(/ﾟ/g, '゜');
  }

var zen2han_ascii = function(str){
  // アルファベット
  str = str.replace(/[Ａ-Ｚａ-ｚ]/g, function (s) {
      return String.fromCharCode(s.charCodeAt(0) - 65248);
  });
  // 数字
  str = str.replace(/[０-９]/g, function (s) {
      return String.fromCharCode(s.charCodeAt(0) - 65248);
  });
  // 記号とハイフン
  var reg = /[！＂＃＄％＆＇（）＊＋，－．／：；＜＝＞？＠［＼］＾＿｀｛｜｝]/g;
  str = str.replace(reg, function (s) {
      return String.fromCharCode(s.charCodeAt(0) - 65248);
  }).replace(/[‐－―]/g, '-');
  // 波記号
  str = str.replace(/[～〜]/g, '~');
  // スペース
  str = str.replace(/　/g, ' ');
  // カナ記号（長音は含まない）
  var map = {'。': '｡', '、': '､', '「': '｢', '」': '｣', '・': '･'};
  var reg2 = new RegExp('(' + Object.keys(map).join('|') + ')', 'g');
  str = str.replace(reg2, function (match) {
      return map[match];
  });
  // 円記号
  str = str.replace(/[￥]/g, '\\');
  // シングルクォート
  str = str.replace(/[’]/g, '\'');
  
  return str;
}

var han2zen_ascii = function(str){
  // アルファベット
  str = str.replace(/[A-Za-z]/g, function (s) {
      return String.fromCharCode(s.charCodeAt(0) + 65248);
  });
  // 数字
  str = str.replace(/\d/g, function (s) {
      return String.fromCharCode(s.charCodeAt(0) + 65248);
  });
  // 記号とハイフン
  var reg = /[!"#\$%&'\(\)\*\+,\-\.\/:;<=>\?@\[\\\]\^_`\{\|\}]/g;
  str = str.replace(reg, function (s) {
      return String.fromCharCode(s.charCodeAt(0) + 65248);
  });
  // 波記号
  str = str.replace(/~/g, '～');
  // スペース
  str = str.replace(/ /g, '　');
  // カナ記号（長音は含まない）
  var map = {'｡': '。', '､': '、', '｢': '「', '｣': '」','･': '・'};
  var reg2 = new RegExp('(' + Object.keys(map).join('|') + ')', 'g');
  str = str.replace(reg2, function (match) {
      return map[match];
  });

  return str;
}

var zen2han_all = function(str) {
    str = zen2han_kana(str);
    str = zen2han_ascii(str);
    return str;
}

var han2zen_all = function(str) {
    str = han2zen_kana(str);
    str = han2zen_ascii(str);
    return str;
}